# Generated by Django 3.1.7 on 2021-06-17 06:06

import Auth.utils
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Adds',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='admin/adds/', verbose_name='Реклама')),
                ('links', models.CharField(max_length=200, verbose_name='Линк для перехода')),
            ],
            options={
                'verbose_name_plural': 'Реклама',
            },
        ),
        migrations.CreateModel(
            name='AmountProAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_subscribe', models.CharField(max_length=50, verbose_name='Название подписки')),
                ('price', models.IntegerField(default=0, verbose_name='Цена подписки в суммах')),
                ('duration', models.IntegerField(default=0, verbose_name='Длительность подписки в днях')),
                ('type', models.IntegerField(choices=[(0, 'Одноразовая оплата'), (1, 'Подписка')], default=0, verbose_name='Тип подписки')),
            ],
            options={
                'verbose_name_plural': 'Подписка',
            },
        ),
        migrations.CreateModel(
            name='Attach',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_of_card', models.CharField(max_length=50)),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='дата')),
                ('date_of_change', models.DateTimeField(blank=True, null=True)),
                ('comments', models.CharField(default='', max_length=100)),
                ('attach', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attach', to='Auth.attach')),
            ],
        ),
        migrations.CreateModel(
            name='Cards',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card', models.ManyToManyField(related_name='card', to='Auth.Card')),
                ('storeCard', models.ManyToManyField(related_name='store_card', to='Auth.Card')),
            ],
        ),
        migrations.CreateModel(
            name='ClickModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pay', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('sum', models.IntegerField(default=0)),
                ('amount', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Expenses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('all_time', models.IntegerField(default=0)),
                ('in_this_month', models.IntegerField(default=0)),
                ('update_month', models.IntegerField(default=30)),
            ],
        ),
        migrations.CreateModel(
            name='ImagesForAttached',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='images/')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField(default=0)),
                ('longitude', models.FloatField(default=0)),
                ('comment', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Orders',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_ids', models.CharField(max_length=255)),
                ('amount', models.IntegerField()),
                ('state', models.IntegerField()),
                ('user_id', models.IntegerField()),
                ('phoneOrMail', models.CharField(max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='PaynetProPayment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customerId', models.CharField(blank=True, max_length=12, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='RecommendCards',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=30, verbose_name='Название карточки')),
                ('recommend_run', models.FloatField(default=0, verbose_name='пробег в километрах 0 - 100000')),
                ('recommend_run_avarage', models.FloatField(default=0, verbose_name='пробег в километрах 100000 - 200000')),
                ('recommend_run_old', models.FloatField(default=0, verbose_name='пробег в километрах 200000 и больше')),
                ('type_car', models.IntegerField(choices=[(0, 'Все'), (1, 'Механика'), (2, 'Автомат')])),
            ],
            options={
                'verbose_name_plural': 'Рекоммендованые карточки',
            },
        ),
        migrations.CreateModel(
            name='RecommendedChange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('initial_run', models.FloatField(blank=True, default=0, null=True)),
                ('run', models.FloatField(blank=True, default=0, null=True)),
                ('time', models.IntegerField(blank=True, default=0, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SelectedUnits',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('speedUnit', models.CharField(default='км/д', max_length=5)),
                ('distanseUnit', models.CharField(default='км', max_length=5)),
                ('fuelConsumption', models.CharField(default='км/л', max_length=5)),
                ('volume', models.CharField(default='UZS', max_length=5)),
            ],
        ),
        migrations.CreateModel(
            name='SingleRecomendation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('main_name', models.CharField(max_length=70, verbose_name='Название для рекомендации')),
                ('description', models.TextField(verbose_name='Описание рекомендации')),
                ('recomended_probeg', models.FloatField(default=0, verbose_name='Рекомендованный пробег в километрах')),
            ],
            options={
                'verbose_name_plural': 'Рекоммендации',
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('user', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Transactions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paycom_transaction_id', models.CharField(max_length=25)),
                ('paycom_time', models.CharField(max_length=13)),
                ('paycom_time_datetime', models.DateField()),
                ('create_time', models.DateField()),
                ('perform_time', models.DateField()),
                ('cancel_time', models.DateField()),
                ('amount', models.IntegerField()),
                ('state', models.IntegerField()),
                ('reason', models.IntegerField()),
                ('receivers', models.CharField(max_length=500)),
                ('order_id', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='TransportDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nameOfTransport', models.CharField(max_length=50)),
                ('marka', models.CharField(max_length=50)),
                ('model', models.CharField(max_length=50)),
                ('yearOfMade', models.CharField(max_length=4)),
                ('yearOfPurchase', models.CharField(max_length=4)),
                ('number', models.CharField(max_length=30)),
                ('numberOfTank', models.IntegerField(default=0)),
                ('firstTankType', models.CharField(max_length=30)),
                ('firstTankVolume', models.IntegerField(default=0)),
                ('secondTankType', models.CharField(blank=True, max_length=30, null=True)),
                ('secondTankVolume', models.IntegerField(blank=True, default=0, null=True)),
                ('run', models.FloatField(default=0)),
                ('initial_run', models.FloatField(default=0)),
                ('tech_passport', models.CharField(max_length=30)),
                ('type_car', models.IntegerField(choices=[(0, 'Все'), (1, 'Механика'), (2, 'Автомат')], default=1)),
                ('cards_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cards_user', to='Auth.cards')),
                ('expenses', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='expenses', to='Auth.expenses')),
            ],
        ),
        migrations.CreateModel(
            name='UserName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(max_length=254, unique=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserTransport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('emailOrPhone', models.CharField(max_length=200, unique=True)),
                ('provider', models.CharField(max_length=30)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('pro_account', models.BooleanField(default=False)),
                ('last_account', models.IntegerField(default=0)),
                ('duration', models.IntegerField(default=0)),
                ('balans', models.IntegerField(default=0)),
                ('cards', models.ManyToManyField(blank=True, null=True, to='Auth.TransportDetail')),
                ('units', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='units', to='Auth.selectedunits')),
            ],
            options={
                'verbose_name_plural': 'Аккаунты',
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.BigIntegerField(default=0)),
                ('paid_time', models.DateField()),
                ('transactionId', models.BigIntegerField(default=0)),
                ('state', models.IntegerField(default=0)),
                ('providerTrnId', models.BigIntegerField(default=Auth.utils.create_new_ref_number, unique=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customer', to='Auth.paynetpropayment')),
            ],
        ),
        migrations.CreateModel(
            name='Temporary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expenses', models.ManyToManyField(to='Auth.Expense')),
                ('image', models.ManyToManyField(to='Auth.ImagesForAttached')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_for_images', to='Auth.usertransport')),
            ],
        ),
        migrations.AddField(
            model_name='paynetpropayment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client_paynet', to='Auth.usertransport'),
        ),
        migrations.CreateModel(
            name='PaymeProPayment',
            fields=[
                ('token', models.CharField(blank=True, max_length=100, null=True)),
                ('id', models.BigIntegerField(default=Auth.utils.create_new_ref_number, primary_key=True, serialize=False, unique=True)),
                ('hashed_id', models.CharField(max_length=50)),
                ('amount', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='amount', to='Auth.amountproaccount')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='client_payme', to='Auth.usertransport')),
            ],
        ),
        migrations.CreateModel(
            name='ModelRegister',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_of_model', models.CharField(max_length=50, unique=True, verbose_name='Название модели')),
                ('image_above', models.ImageField(upload_to='admin/', verbose_name='Фото для модели')),
                ('text_above', models.TextField(verbose_name='Описание модели')),
                ('recomendations', models.ManyToManyField(to='Auth.SingleRecomendation', verbose_name='Рекомендации для модели')),
                ('recommend_card', models.ManyToManyField(to='Auth.RecommendCards', verbose_name='Рекомендованные карточки')),
            ],
            options={
                'verbose_name_plural': 'Модель',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=10, verbose_name='Заглавние')),
                ('body', models.CharField(max_length=50, verbose_name='Содержание')),
                ('type_car', models.IntegerField(choices=[(0, 'Все'), (1, 'Механика'), (2, 'Автомат')], default=0, verbose_name='Тип машины')),
                ('type_cards', models.ManyToManyField(to='Auth.Card', verbose_name='Для каких карточек')),
            ],
            options={
                'verbose_name_plural': 'Push уведомления',
            },
        ),
        migrations.CreateModel(
            name='MarkaRegister',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_of_marka', models.CharField(default=0, max_length=50, unique=True, verbose_name='Название марки')),
                ('model', models.ManyToManyField(to='Auth.ModelRegister', verbose_name='Модель')),
            ],
            options={
                'verbose_name_plural': 'Марка',
            },
        ),
        migrations.AddField(
            model_name='card',
            name='change',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attach', to='Auth.recommendedchange'),
        ),
        migrations.AddField(
            model_name='card',
            name='expense',
            field=models.ManyToManyField(blank=True, null=True, to='Auth.Expense'),
        ),
        migrations.AddField(
            model_name='attach',
            name='image',
            field=models.ManyToManyField(to='Auth.ImagesForAttached'),
        ),
        migrations.AddField(
            model_name='attach',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='location', to='Auth.location'),
        ),
    ]
